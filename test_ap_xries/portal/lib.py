import pymysql as mdb,inspect,textwrap,json,os,astfrom socket import gethostname, gethostbynamefrom django.conf import settingsfrom django.shortcuts import *from collections import OrderedDictimport subprocess,datetime,timefrom configparser import ConfigParserfrom . import validation,constant_data,dropdown,permissionsfrom django.contrib import messagesfrom django.contrib.auth.models import Userfrom django.db.models import Qdef print_dstring(str):    if settings.DEBUG_PRINT == 0:        return    print(str)def setMetaInformation(request,activeMenu,name,breadcrumb={''}):    try :        setattr(request, 'title',name)        setattr(request, 'WEBSITE_TITLE', constant_data.WEBSITE_TITLE)        setattr(request, 'meta_title', name +' - ' + constant_data.WEBSITE_TITLE)        setattr(request, 'logo_heading', constant_data.WEBSITE_TITLE)        if activeMenu:            setattr(request, 'activeMenu',activeMenu)        if not breadcrumb:            setattr(request, 'breadcrumb','')        else:            setattr(request, 'breadcrumb',breadcrumb)    except Exception as e:        print(e)        passclass MyDB(object):    _db_connection = None    _db_cur = None    def __init__(self):        self._db_connection = mdb.connect(settings.APEX_URL,settings.APEX_USER,settings.APEX_PASS,settings.APEX_DB)        self._db_cur = self._db_connection.cursor()    def query(self, query,type = 0):        try:            results = self._db_cur.execute(query)            print_dstring('Query : '+str(query)+' | Results : '+str(results))            if type == 0:                result = self._db_cur.fetchall()            elif type == 1:                result = self._db_cur.fetchone()            else:                result = self._db_cur.fetchmany(type)            self._db_connection.autocommit(1)            self._db_connection.close()            return result        except Exception as e:            self._db_connection.autocommit(1)            self._db_connection.close()            print("Sql : ",query,"  ")            print("DB Error : ",e)    def queryWithReturn(self, query,type = 0):        try:            results = self._db_cur.execute(query)            print_dstring('Query : '+str(query)+' | Results : '+str(results))            if type == 0:                result = self._db_cur.fetchall()            elif type == 1:                result = self._db_cur.fetchone()            else :                result = self._db_cur.fetchmany(type)            self._db_connection.autocommit(1)            self._db_connection.close()            return {'result': result,'rows':results}        except Exception as e:            print("Sql : ", query)            print("DB Error : ",e)    def insert(self, query,type= 0):        if type == 0:            try:                result =  self._db_cur.execute(query)                self._db_connection.autocommit(1)                lastrowid = self._db_cur.lastrowid                print_dstring('__________insert____________')                print_dstring('Query : '+str(query)+' | Results : '+str(result)+' | Return : '+str(lastrowid))                self._db_connection.close()                return lastrowid            except Exception as e:                print('Inspect Function : ',inspect.stack()[1][3])                print("Sql : ", query)                print("DB Error : ",e)        if type == 1:            try :                result = []                print_dstring('__________insert(T)____________')                for sql in query:                    insertID =  self._db_cur.execute(sql)                    #lastrowid = self._db_cur.lastrowid                    print_dstring('Query : '+str(sql)+' | Return : '+str(insertID))                    result.append(insertID)                self._db_connection.autocommit(1)                self._db_connection.close()                print('Result :',result)                return result            except Exception as e:                self._db_connection.rollback(1)                self._db_connection.close()                print('Inspect Function : ',inspect.stack()[1][3])                print("DB Error (insert): ",e);                print("Sql (Insert Tran) : ", query)                return 0def db_query(sql,rows = 0):    try :        if rows == 0:            dbobj = MyDB()            return dbobj.query(sql)        else :            dbobj = MyDB()            return dbobj.query(sql,rows)    except Exception as e:        print('Inspect Function : ',inspect.stack()[1][3])        print('Error in Sql ',sql,' Error ',e)    except Warning as e:        print('Inspect Function : ',inspect.stack()[1][3])        print('Error in Sql(Warning) ', sql, ' Error ', e)def db_insert(sql,type=0):    try :         dbobj = MyDB()         return dbobj.insert(sql,type)    except Exception as e:        print('Error in Sql ',sql,' Error ',e)def handle_uploaded_file(request,file,directory_path,function):    from apex import settings    if file:        if function == 'iniFileUpload':            try:                fileName = file                destination = open(directory_path+'/' +str(fileName), 'wb+')                for chunk in file.chunks():                    destination.write(chunk)                destination.close()            except Exception as e:                print('Error while writing file: ', e)            return 0        else:            destination = open(settings.UPLOAD_FILE_PATH+'cluster_files\\'+str(directory_path)+'.zip', 'wb+')            for chunk in file.chunks():                destination.write(chunk)            destination.close()            return 0    else:        return 1def is_memeber(grp,user):    return grp in user.groups.values_list('name', flat=True)def trimString(name,length):    if len(str(name)) > length:        name = textwrap.wrap(name, length)        name = str(name[0]) + "..."    else:        name = str(name)    return namedef log_entry(type,cid,user,actionType,details,ctype='NULL',progress='NULL'):    ip = gethostbyname(gethostname())   # sql = "INSERT INTO " + str(type) + "(`ClusterId`, `UserName`, `UserIp`, `ActionType`, `Details`,`Type`,`Progress`,`State`) VALUES (" + cid + ",'" + str(user) + "',INET_ATON("+str("'"+ip+"'")+"),'" + str(actionType)+ "'," + str(details)+ ","+str(ctype)+","+str(progress)+","+str(state)+")"    sql = "INSERT INTO " + str(type) + "(`ClusterId`, `UserName`, `UserIp`, `ActionType`, `Details`,`Type`,`Progress`) VALUES (" + cid + ",'" + str(user) + "',INET_ATON("+str("'"+ip+"'")+"),'" + str(actionType)+ "'," + str(details)+ ","+str(ctype)+","+str(progress)+")"    db_insert(sql)def cluster_log_list(request):    setMetaInformation(request,[('Log cluster'),('log_list')],'Cluster log List',OrderedDict( [('Cluster',''),('Cluster List','')]))    return render(request, 'portal/log_list.html')def addData(dataKey,dataArry):    if dataKey in dataArry:        return str(dataKey)+"="+str(dataArry[dataKey])+"\r\n"    else:        return ''def addDataItem(dataKey,dataVal):        return str(dataKey)+"="+str(dataVal)+"\r\n"def saveFile(string,name):    try :        directory_path = settings.DATA_FOLDER+"\\ini\\"+datetime.datetime.now().strftime("%Y%m%d_%H%I%S")+"_"+str(name)        if not os.path.exists(directory_path):            os.makedirs(directory_path)    except Exception as e:        print("Error in writing direcory : ",str(e))        return 0    lenFiles = len(os.listdir(directory_path))    if lenFiles > 0:        print('Error.. Multiple request')        print('Errrr. lisd dir',os.listdir(directory_path))        return None    else:        fileName = directory_path+"\\"+str(lenFiles+1)+".ini"    try :        f = open(fileName,'w')        f.write(string)        f.close()        return directory_path    except Exception as e:        print("Errorn in writing ini file",str(e))        return 0def runTool(type,directory_path,action=0,clusterId=''):    try:        if action == 'add' or action == 'update' :            runScript = settings.TOOL_PATH+"addgendb.exe /add "+directory_path+" config/"+str(constant_data.TypeProperty[type]['configFile'])+" "+str(constant_data.TypeProperty[type]['runtool'])+" "+str(clusterId)        if action == 'del':            runScript = settings.PYTHON34_PATH + " "+settings.TOOL_PATH + "excludesig.py /siglist="+directory_path+ " " + "/reason=gc"        p = subprocess.Popen(runScript, stdout=subprocess.PIPE, shell=True)        out, err = p.communicate()        return {'data':str(out.decode("utf-8")).strip(),'Error':err,'runScript':runScript}    except Exception as e :        print('Error in Script : ',str(e))        return {'data':str(e),'Error':'Exception by Python','runScript':runScript}def processData(request,data,ClusterType,ClusterFieldAllowed):    updateVal = data['Update']    iniFileString = ""    iniFileString += "#start \r\n"    uniqId = data['ClusterId']+'_'+str(datetime.datetime.now().strftime('%Y%m%d_%H%M%S'))+'_'+str(request.session._session_key)    iniFileString += "["+uniqId+"]\r\n"    if updateVal:        action = 'update'        iniFileString += addDataItem('Update',data['Update'])        iniFileString += addData('MalwareIndex',data)    else :        action = 'add'    iniFileString += addDataItem('Type',constant_data.CLUSTER_TYPE[ClusterType])    iniFileString += addData('ClusterId',data)    iniFileString += "\r\n"    sig = sorted(data['sig'].items())    comment = sorted(data['Comment'].items())    BufferSize = sorted(data['patternBufferSizeDict'].items())    Distance = sorted(data['Distance'].items())    Offset = sorted(data['patternOffsetDict'].items())    if 'patternWeakSig' in data:        weakSig = sorted(data['patternWeakSig'].items())    keyArr = []    pattern,cut,startToken,endToken,buffer,offset,distance,locationId,pattComment,patweakSig= {},{},{},{},{},{},{},{},{},{}    for alph, signature in sig:        keyArr.append(alph)        pattern.update({alph:signature})    if 'CLEANUP_TYPE' in ClusterFieldAllowed:        cleanUpType = sorted(data['patterncleanUpType'].items())        if (len(cleanUpType)):            for alph, type in cleanUpType:                if type:                    cut.update({alph:type})        if 'StartToken' in data:            StartTokenData = sorted(data['StartToken'].items())            if StartTokenData:                for alph, token in StartTokenData:                    if token and token != 'NULL':                        startToken.update({alph:token})        if 'EndToken' in data:            EndTokenData = sorted(data['EndToken'].items())            if EndTokenData:                for alph, token in EndTokenData:                    if token and token != 'NULL':                        endToken.update({alph:token})    if 'BUFFER' in ClusterFieldAllowed and (len(BufferSize)):        for alph, type in BufferSize:            buffer.update({alph:type})    if 'DISTANCE' in ClusterFieldAllowed and (len(Distance)):        for alph, type in Distance:            distance.update({alph:type})    if 'OFFSET' in ClusterFieldAllowed and (len(Offset)):        for alph, type in Offset:            offset.update({alph:type})    if 'LOCATION_ID' in ClusterFieldAllowed:        LocationId = sorted(data['patternLocationIdDict'].items())        if (len(LocationId)):            for alph, type in LocationId:                if type != '':                    locationId.update({alph:type})    if 'WEAK_SIG' in ClusterFieldAllowed:        for alph, weaksig in weakSig:            patweakSig.update({alph:weaksig})    if (len(comment)):        for alph, comm in comment:            pattComment.update({alph:comm})    for key in keyArr:        if key in pattern:            iniFileString += addDataItem(key + ".Sig", pattern[key]);        if key in cut:            iniFileString += addDataItem(key + ".CleanupType", cut[key]);        if key in startToken:            iniFileString += addDataItem(key + ".StartToken", startToken[key]);        if key in endToken:            iniFileString += addDataItem(key + ".EndToken", endToken[key]);        if key in buffer:            iniFileString += addDataItem(key + ".BufferSize",buffer[key])        if key in offset:            iniFileString += addDataItem(key + ".Offset", offset[key])        if key in distance:            iniFileString += addDataItem(key + ".Distance", distance[key])        if key in locationId:            iniFileString += addDataItem(key + ".LocationId", locationId[key])        if key in patweakSig:            iniFileString += addDataItem(key + ".WeakSig", patweakSig[key])        if key in pattComment:            iniFileString += addDataItem(key + ".Comment", pattComment[key])        iniFileString += "\r\n"    if 'FILTER' in ClusterFieldAllowed and 'FILTER' in data :        filterData = OrderedDict(sorted(data['FILTER'].items()))        for filDataIdx in filterData:            iniFileString += "Filter"+str(filDataIdx)+".field="+filterData[filDataIdx]['field']+"\r\n"            iniFileString += "Filter"+str(filDataIdx)+".oprt="+filterData[filDataIdx]['oprt']+"\r\n"            iniFileString += "Filter"+str(filDataIdx)+".value="+filterData[filDataIdx]['value']+"\r\n"            iniFileString += "\r\n"    if 'THREAT_NAME' in ClusterFieldAllowed:        iniFileString += addData('ThreatName', data)    iniFileString += addData('Status', data)    if 'FILE_TYPE' in ClusterFieldAllowed and 'FileType' in data and data['FileType']:        iniFileString += addData('FileType', data)    iniFileString += addData('AuthorName', data)    if 'POLYFUNC' in ClusterFieldAllowed and 'PolyFunIndex' in data and data['PolyFunIndex'] :        iniFileString += addData('PolyFunIndex',data)    if 'SUS_WEAK_DETECTION' in ClusterFieldAllowed and 'WeakDetection' in data:        iniFileString += addData('WeakDetection', data)    if 'SCAN_RULE' in ClusterFieldAllowed and 'ScanRule' in data and  data['ScanRule'] != '':        iniFileString += addData('ScanRule',data)    if 'SCAN_RULE_SUSP' in ClusterFieldAllowed and 'ScanRuleSusp' in data and data['ScanRuleSusp'] != '':        iniFileString += addData('ScanRuleSusp',data)    if 'Sequence' in data and ('SCAN_RULE' in ClusterFieldAllowed or 'SCAN_RULE_SUSP' in ClusterFieldAllowed):         iniFileString += addData('Sequence',data)    if 'RecordComment' in data and data['RecordComment']:       iniFileString += addDataItem("Comment", data['RecordComment']);    if 'STATUS' in ClusterFieldAllowed and 'status' in data:        iniFileString += addData('status', data)    if 'State' in data:        iniFileString += addData('State',data)    iniFileString += "\r\n"    if 'Tag' in data and data['Tag']:        iniFileString += "Tags=" +str(data['Tag']) +"\r\n"    iniFileString += "#end \r\n "    fileName = saveFile(iniFileString,uniqId)    if fileName :        data = runTool(ClusterType,fileName,action,data['ClusterId'])        debugLog(data,request.user.username)    else:        data = {'data':'Permision Error','Error':'Exception by Python'}        print('Error occured')    if data['Error'] == None:        return data['data']def getClusterUpdatedDetais(request,logclusterId):    #sql = 'SELECT Details, cluster.ClusterName,UserName,INET_NTOA(UserIp),LogTime,log_cluster.ClusterId,cluster.Type,cluster.Progress,cluster.State FROM log_cluster INNER JOIN cluster ON log_cluster.ClusterID=cluster.ClusterID where log_cluster.ClusterLogID = '+str(logclusterId)    sql = 'SELECT Details, cluster.ClusterName,UserName,INET_NTOA(UserIp),LogTime,log_cluster.ClusterId,cluster.Type,cluster.Progress FROM log_cluster INNER JOIN cluster ON log_cluster.ClusterID=cluster.ClusterID where log_cluster.ClusterLogID = '+str(logclusterId)    clusterUpdatedData = db_query(sql)    if clusterUpdatedData is None or len(clusterUpdatedData) == 0:        messages.info(request, "Cluster Is Removed or Invalid Request.")        return render(request, 'portal/cluster-list.html')    for data in clusterUpdatedData:        details = data[0]        clusterName = data[1]        UserName = data[2]        UserIp = data[3]        LogTime ="{:%Y/%m/%d %H:%M}" .format(data[4])        ClusterId = data[5]        Type = str(constant_data.CLUSTER_TYPE[data[6]])        Progress = str(constant_data.CLUSTER_PROGRESS[data[7]])       # State = str(constant_data.STATE[data[8]])    updatedData = ast.literal_eval(details)    detailsDict = updatedData    multiOptionArr = ['Manager','Reviewer','QA Team']    for temp in detailsDict.keys():        if str(temp) in multiOptionArr:            value = detailsDict[temp]            old = ','.join(str(e) for e in ast.literal_eval(value['old']))            new = ','.join(str(e) for e in ast.literal_eval(value['new']))            updatedData[temp].update({'old':old,'new':new})    clusterName = trimString(str(clusterName),40)    setMetaInformation(request, [('cluster')], 'Log Cluster : ' + str(clusterName),OrderedDict([('Cluster', '/cluster/list'), (str(clusterName), '/cluster/'+str(ClusterId)+'/?action=view'),('Log Cluster', '')]))   # return render(request, 'portal/log_cluster_view.html',{'data': updatedData,'ClusterName':clusterName,'UserName':UserName,'UserIp':UserIp,'LogTime':LogTime,'Type':Type,'Progress':Progress,'State':State})    return render(request, 'portal/log_cluster_view.html',{'data': updatedData,'ClusterName':clusterName,'UserName':UserName,'UserIp':UserIp,'LogTime':LogTime,'Type':Type,'Progress':Progress})def getFileRule(sumFile,type,sectionName):    ConfigFile = settings.TOOL_PATH+"config\\"+str(constant_data.TypeProperty[type]['configFile'])    config = ConfigParser()    config.read(ConfigFile)    fileTypeArr = dict(config.items(str(sectionName)))    if sumFile == '':        return fileTypeArr    return getValueByWeight(fileTypeArr,sumFile)def getValueByWeight(arrValue,search):    list = []    for item,value in arrValue.items() :        list.append([item,value])    list = sorted(list,key=lambda l:int(l[1]), reverse=True)    searchRem = search    resultArr,sum = [],0    for i,(k,weight) in enumerate(list):        weight = int(weight)        if search < int(weight):            continue        if sum == search:            break        if weight <= searchRem :            sum += weight            searchRem -= weight            resultArr.append(str(k).upper())        else :            continue    return resultArrdef fileTypeJoin(fileType):    fileType= '|'.join(fileType)    return fileTypedef clusterLogData(limit,where=''):    sql = 'SELECT log_cluster.ClusterID,cluster.ClusterID,UserName,INET_NTOA(UserIp),ActionType,Details,LogTime, cluster.ClusterName,ClusterLogID FROM log_cluster INNER JOIN cluster ON log_cluster.ClusterID=cluster.ClusterID '+where+' order by ClusterLogID desc limit '+limit+';'    clusterData = db_query(sql)    dataString = '<h4 id="cluster_activities" >Cluster History</h4>'    dataString += '<div class="scroll scrollbar">'    dataString += '<ul class="homeClusterActivity force-overflow">'    if clusterData:        for data in clusterData:            if str(data[4]) == str(constant_data.ACTIONTYPE[1]):                type = 'added'                symbol = '<a href="/cluster/'+str(data[0])+'/?action=view/" ><button class="btn btn-default btn-xs " title="View Cluster"><center> <span class="glyphicon glyphicon-plus" title="View Cluster"></span> </center> </button></a>'                desc = " is added by <a href='/user/" + str(data[2]) + "' title='View User'>" + str(data[2]) + "</a>"            if str(data[4]) == str(constant_data.ACTIONTYPE[2]):                type = 'updated'                desc = " is updated by <a href='/user/" + str(data[2]) + "' title='View User'>" + str(data[2]) + "</a> "                symbol = '<a href="/cluster/log/'+str(data[8])+'/"><button class="btn btn-default btn-xs" title="Check updated fields"><center> <span class="glyphicon glyphicon-edit" title="Check updated fields"></span> </center> </button></a>'            if str(data[4]) == str(constant_data.ACTIONTYPE[3]):                type = 'deleted'                desc = " is deleted by <a href='/user/" + str(data[2]) + "'>" + str(data[2]) + "</a> "                symbol = '<button class="btn btn-default btn-xs "  disabled><center> <span class="glyphicon glyphicon-remove"></span> </center> </button>'            clusterName = trimString(str(data[7]), 15)            if str(data[4]) == str(constant_data.ACTIONTYPE[3]):                dataString += "<li class='" + type + "' > " + str(symbol) + "  " + format(data[6]) + "  :  <a style='cursor:not-allowed;text-decoration:none;'>" + str( clusterName) + "</a> " + desc + " </li>"            else:                dataString += "<li class='" + type + "' > " + str(symbol) + "  " + format( data[6]) + "  :  <a href='/cluster/" + str(data[0]) + "/?action=view/' title='View Cluster'>" + str(clusterName) + "</a> " + desc + " </li>"        dataString += "</ul>"        dataString += "</div>"    else:        dataString = ''    return dataString                                                                                          def clusterAdd(request):    SignatureManagers = User.objects.all()    if request.POST is None:        setattr(request.POST,' ',SignatureManagers)        return render(request, 'portal/cluster-new.html', {'data': request.POST})    error_message = 0    zip_file = request.FILES.get('zipFile')    error_message += validation.requiredField(request, 'Cluster Name', request.POST['ClusterName'])    error_message += validation.validAlphaNumChar(request, 'Cluster Name', request.POST['ClusterName'])    error_message += validation.requiredField(request, 'Cluster Source', request.POST['Source'])    error_message += validation.requiredField(request, 'Cluster Assign To', str(request.POST['ClusterAssignedTo']))    error_message += validation.requiredField(request, 'Cluster Priority', request.POST['Priority'])    error_message += validation.requiredField(request, 'Cluster Type', request.POST['Type'])   # error_message += validation.requiredField(request, 'Cluster State', request.POST['State'])    error_message += validation.requiredField(request, 'Cluster Progress', request.POST['Progress'])    #if request.POST['cluster_file_ids'] == '' and request.POST['ClusterId'] == '':   #   error_message += validation.requiredField(request, 'File Upload', request.POST['cluster_file_ids'])    if request.POST['Priority'] != '':        error_message += validation.invalidSelect(request, 'Priority', str(request.POST['Priority']), constant_data.CLUSTER_PRIORITY.values())    typeKey =[]    if request.POST['Type'] != '':        for key, value in constant_data.CLUSTER_TYPE.items():            typeKey.append(str(key))        error_message += validation.invalidSelect(request, 'Type', str(request.POST['Type']),typeKey)    processKey = []    if request.POST['Progress'] != '':        for key,value in constant_data.CLUSTER_PROGRESS.items():            processKey.append(str(key))        error_message += validation.invalidSelect(request, 'Progress', request.POST['Progress'],processKey)    stateKey = []    # if request.POST['State'] != '':    #     for key, value in constant_data.STATE.items():    #         stateKey.append(str(key))    #     error_message += validation.invalidSelect(request, 'State', request.POST['State'],stateKey)    assignToUser = []    if request.POST['ClusterAssignedTo'] != '':        for assignUser in SignatureManagers:            assignToUser.append(str(assignUser))        error_message += validation.invalidSelect(request, 'Cluster Assign To', str(request.POST['ClusterAssignedTo']),assignToUser)    #for othersources    otherSource = ''    if request.POST['Source'] == "0":        error_message += validation.requiredField(request, 'Other Cluster Source', request.POST['otherSource'])        otherSource = request.POST['otherSource']    if request.POST['Source'] !='':        error_message += validation.invalidSelect(request, 'Cluster Source', request.POST['Source'], constant_data.CLUSTER_SOURCE.keys())    data = {'ClusterId': request.POST['ClusterId'], 'ClusterName': request.POST['ClusterName'],            'ClusterNotes': request.POST['ClusterNotes'], 'source': request.POST['Source'],            'priority': request.POST['Priority'], 'assignto': str(request.POST['ClusterAssignedTo']),            #'SignatureManagers': SignatureManagers, 'zipFile': str(zip_file), 'otherSource': otherSource,'Type':request.POST['Type'],'State':request.POST['State'],'Progress':request.POST['Progress'],'ClusterFileIds':request.POST['cluster_file_ids']}            'SignatureManagers': SignatureManagers, 'zipFile': str(zip_file), 'otherSource': otherSource,'Type':request.POST['Type'],'Progress':request.POST['Progress'],'ClusterFileIds':request.POST['cluster_file_ids']}    return error_message,datadef processOutput(request,result):    result = "{"+result.strip()[:-1]+"}";    sectionIds = []    try:        resultSet = json.loads(result)        for set in resultSet:            sectionIds.append(set)        for secId in  sectionIds:            result = int(resultSet[secId]['result'])            malwareIndex = int(resultSet[secId]['MalwareIndex'])            if result == 0:                print('Added action')                messages.success(request, "Signature Is Added Successfuly.")                return  {"id":secId,'type':0,"response":str(resultSet[secId]['response']),"SigId":str(resultSet[secId]['SigId']),"MalwareIndex":malwareIndex}            elif result == 2:                print('Duplicate action')                messages.error(request, "Signature Pattern Is Duplicate.")                return  {"id":secId,'type':2,"response":str(resultSet[secId]['response'])}            elif result == 3:                print('Updated action')                messages.success(request, "Signature Is Updated Successfully.")                return  {"id":secId,'type':3,"response":str(resultSet[secId]['response']),"SigId":str(resultSet[secId]['SigId']),"MalwareIndex":malwareIndex}            elif result == 4:                print('Deleted action')                messages.info(request, "Signature Is Deleted Successfully.")                return  {"id":secId,'type':4,"response":str(resultSet[secId]['response'])}            else:                print('Error found(lib processOutput )',resultSet)                messages.error(request, "Error : "+str(resultSet[secId]['response']))                return  {"id":secId,'type':1,"response":str(resultSet[secId]['response'])}            break    except Exception as e:        print('Error in processOutput : ',e)        print('Result : ',result)    return resultdef progressIniOutput(request,result):    sectionIds,resultArr = [],[]    try:        resultSet = json.loads(result)        print(resultSet)        for set in resultSet:            sectionIds.append(set)        for secId in sectionIds:            result = int(resultSet[secId]['result'])            if result == 0:                userIp = gethostbyname(gethostname())                #print(userIp)                resultArr.append({"id": secId, 'type': result, "response": str(resultSet[secId]['response']),'class':'glyphicon glyphicon-ok '})            elif result == 2:                resultArr.append({"id": secId, 'type':result, "response": str(resultSet[secId]['response']),'class':'glyphicon glyphicon-alert '})            else:                resultArr.append({"id": secId, 'type': result, "response": str(resultSet[secId]['response']),'class':'glyphicon glyphicon-remove '})        return resultArr    except Exception as e:        print('Error in processOutput : ', e)    return resultdef debugLog(data,user=''):    result = data    dateStemp = time.strftime("%Y/%m/%d %H:%M:%S ")    logData = "\r\n----------------------- "+str(dateStemp)+"--------------------------------------"    logData += "\r\n User :"+str(user)    logData += "\r\n Data :"+str(data['data'])    logData += "\r\n runScript :"+str(data['runScript'])    if data['Error'] != None:        logData += "\r\n Error :"+str(+data['Error'])    if settings.DEBUG_PRINT == 0:        return    else:        file = open(settings.DATA_FOLDER+'\\log_tool\\tool.log','a')        file.write(logData)        file.close()    returndef signatureValidation(request):    malwareIndex = ''    if request.POST is None:        return render(request, 'portal/signature-new.html')    error_message,fileTypeSelect = 0,''    error_message += validation.requiredField(request, 'Cluster Id', request.POST['ClusterId'])    error_message += validation.requiredField(request, 'Signature Pattern', request.POST['SignatureData'])    error_message += validation.requiredField(request, 'Threat Name', str(request.POST['ThreatName']))    error_message += validation.requiredField(request, 'State', request.POST['State'])    if request.POST['Update']:        error_message += validation.requiredField(request, 'Malware Index', request.POST['MalwareIndex'])        malwareIndex = request.POST['MalwareIndex']    clusterType = constant_data.CLUSTER_TYPE_NAME.get(request.POST['clusterType'])    if 'FileType' in request.POST :        fileTypeSelect = dropdown.getFileDropDown(clusterType,0)        error_message += validation.requiredField(request, 'File Type', request.POST['FileType'])    stateKey = []    if request.POST['State'] != '':         for key, value in constant_data.SIG_STATE.items():             stateKey.append(str(key))         error_message += validation.invalidSelect(request, 'State', request.POST['State'],stateKey)    signature =''    if request.POST['SignatureData']:        signature = request.POST['SignatureData'].split(',')        sig, sigData = {}, {}        for pattern in signature:            key, val = pattern.split(':')            sig.update({key: str(val)})        signature = sorted(sig.items())    ClusterId = ''    if request.POST['ClusterId']:        ClusterId = int(request.POST['ClusterId'])    data = {'ThreatName': request.POST['ThreatName'],'ClusterId':ClusterId, 'signatures': signature,'MalwareIndex': malwareIndex,'fileTypeSelect': fileTypeSelect,'State':request.POST['State']}    return error_message,datadef createSignatureIni(data):    CreatedDate = str(datetime.datetime.now())    iniFileString = ""    iniFileString += "#start \r\n"    iniFileString += "[" +datetime.datetime.now().strftime("%Y%m%d_%H%I%S")+"_"+ data['SigId'] + "]\r\n"    iniFileString += addData('MalwareIndex', data)    iniFileString += addData('State', data)    iniFileString += addData('ClusterId', data)    iniFileString += addData('Type', data)    iniFileString += "\r\n"    sig = sorted(data['sig'].items())    for alph, signature in sig:        iniFileString += addDataItem(alph + ".Sig", signature['pattern']);        if 'buffsize' in signature and signature['buffsize'] != '':            iniFileString += addDataItem(alph + ".BufferSize", signature['buffsize']);        if 'offset' in signature and signature['offset'] != '':            iniFileString += addDataItem(alph + ".Offset", signature['offset']);        if 'Distance' in signature and signature['Distance'] != '':            iniFileString += addDataItem(alph + ".Distance", signature['Distance']);        if 'locId' in signature and signature['locId'] != '':            LocId = ''.join(getFileRule(signature['locId'], int(data['clusterType']), 'SigLocationId'))            iniFileString += addDataItem(alph + ".LocationId", LocId);        if 'cleanUpType' in signature and signature['cleanUpType'] != 0 and signature['cleanUpType'] != '':            CleanupType = ''.join(getFileRule(int(signature['cleanUpType']), int(data['clusterType']), 'CleanupType'))            iniFileString += addDataItem(alph + ".CleanupType", CleanupType);            if 'startToken' in signature and signature['startToken'] != '' and signature['startToken'] != 'NULL':                iniFileString += addDataItem(alph + ".StartToken", signature['startToken']);            if 'endToken' in signature and signature['endToken'] != ''  and signature['endToken'] != 'NULL':                iniFileString += addDataItem(alph + ".EndToken", signature['endToken']);        if 'WeakSig' in signature and signature['WeakSig'] != '':            iniFileString += addDataItem(alph + ".WeakSig", signature['WeakSig']);        if 'Comment' in signature and signature['Comment'] != '':            iniFileString += addDataItem(alph + ".Comment", signature['Comment']);        iniFileString += "\r\n"    if 'FILTER' in data :        filterData = OrderedDict(sorted(data['FILTER'].items()))        for filDataIdx in filterData:            iniFileString += "Filter"+str(filDataIdx)+".field="+filterData[filDataIdx]['field']+"\r\n"            iniFileString += "Filter"+str(filDataIdx)+".oprt="+filterData[filDataIdx]['oprt']+"\r\n"            iniFileString += "Filter"+str(filDataIdx)+".value="+str(filterData[filDataIdx]['value'])+"\r\n"            iniFileString += "\r\n"    iniFileString += "\r\n"    if 'ThreatName' in data and data['ThreatName']:        iniFileString += addData('ThreatName', data)    if 'FileType' in data and data['FileType']:        iniFileString += addData('FileType', data)    if 'ScanRule' in data and data['ScanRule'] != 'NULL':        iniFileString += addData('ScanRule', data)    if 'ScanRuleSusp' in data and data['ScanRuleSusp'] != 'NULL':        iniFileString += addData('ScanRuleSusp', data)    if 'ScanRuleSequence' in data and  data['ScanRuleSequence']:        iniFileString += addDataItem("Sequence", data['ScanRuleSequence']);    if 'susWeakDetection' in data and data['susWeakDetection']:        iniFileString += addDataItem("WeakDetection", data['susWeakDetection']);    if 'status' in data and data['status']:        iniFileString += addDataItem("status", data['status']);    if 'PolyFunIndex' in data and data['PolyFunIndex'] != '':        iniFileString += addData('PolyFunIndex', data)    if 'RecordComment' in data and data['RecordComment']:        iniFileString += addDataItem("Comment", data['RecordComment']);    iniFileString += "\r\n"    if 'tagResult' in data and data['tagResult']:         iniFileString += "Tags="+str(data['tagResult']) +"\r\n"    iniFileString += "#CreatedDate:" +str(CreatedDate) +"\r\n"    iniFileString += "#end \r\n "    return iniFileStringdef user_cluster_list_ajax(request):    start = request.GET['start']    length = request.GET['length']    draw = request.GET['draw']    columns = ['ClusterID','ClusterName','CreatedBy','ClusterAssignedTo','Source','Priority']    Perm_Type_Arr = permissions.checkclusterTypePermission(request)    if len(Perm_Type_Arr):        if len(Perm_Type_Arr) == 1:            Perm_Type_Arr = "("+str(Perm_Type_Arr[0]) +")"        else:            Perm_Type_Arr = tuple(Perm_Type_Arr)    else:        resp = {"draw": draw, "recordsTotal": 0, "recordsFiltered": 0, "data": ''}        return HttpResponse(json.dumps(resp), content_type='application/json')    searchColArr,i,orderString = [],0,''    where_text = ' where cluster.Status = 1'    if len(Perm_Type_Arr):        where_text+= ' and cluster.Type in '+str(Perm_Type_Arr)    for col in columns:        if request.GET['columns['+str(i)+'][search][value]'] :            print(i,col)            if i == 3 or i == 5:                searchColArr.append({'column':col,'value':request.GET['columns['+str(i)+'][search][value]'],'operator':1})            else:                searchColArr.append({'column':col,'value':request.GET['columns['+str(i)+'][search][value]']})        if 'order[0][column]' in  request.GET :            if str(request.GET['order[0][column]']) == str(i):                orderString = ' order by '+str(col)+' '+str(request.GET['order[0][dir]'])        i += 1    i = len(searchColArr)    if len(searchColArr) > 0:        where_text += " and  "    for searchString in searchColArr:        i -= 1        if 'default' in request.GET and request.GET['default'] == searchString['column']:            where_text += searchString['column'] + ' like "' + searchString['value'] + '" '        else:            if 'operator' in searchString and searchString['operator'] == 1:                where_text += searchString['column'] + ' = "' + searchString['value'] + '" '            else:                where_text += searchString['column'] + ' like "%' + searchString['value'] + '%" '        if i != 0:            where_text += ' and '    sqlDataCount = 'SELECT count(ClusterID) from cluster where cluster.Status=1'    if len(Perm_Type_Arr):        sqlDataCount += ' and cluster.Type in ' + str(Perm_Type_Arr)    if 'default' in request.GET and request.GET['default']:        sqlDataCount += ' and '+str(request.GET['default']) +' = "'+str(request.GET[request.GET['default']])+'"'        where_text += ' and '+str(request.GET['default']) +' = "'+str(request.GET[request.GET['default']])+'"'    DataCountTotal = db_query(sqlDataCount,1)    if len(searchColArr):        sqlFilCount = 'SELECT count(ClusterID) from cluster '+where_text        DataCountFilTotal = db_query(sqlFilCount,1)    else:        DataCountFilTotal=DataCountTotal    sql = 'SELECT ClusterID,ClusterName,CreatedBy,ClusterAssignedTo,Source,Status,Priority from cluster '+where_text+' '+orderString+' limit '+start+','+length    clusters = db_query(sql)    data = []    for cluster in clusters:            viewBtn = '<a href="/cluster/'+str(cluster[0])+'?action=view" class="label label-primary">View</a>'            ClusterName = trimString(str(cluster[1]),35)            if str(cluster[4]) in constant_data.CLUSTER_SOURCE:                source = constant_data.CLUSTER_SOURCE[str(cluster[4])]            else:                source = cluster[4]            ClusterSource = trimString(str(source),15)          #  State = "<span class='state_span' >" + str(constant_data.STATELIST[cluster[7]]) + "</span>"            data.append({'ClusterID':str(cluster[0]),'ClusterName':ClusterName ,'CreatedBy':"<a href='/user/"+str(cluster[2])+"'>"+str(cluster[2])+"</a>",'ClusterAssignedTo':"<a href='/user/"+str(cluster[3])+"'>"+ str(cluster[3])+"</a>",'Source': str(ClusterSource),'Priority':"<center>"+str(cluster[6])+"</center>",'View':viewBtn })    recordsTotal = DataCountTotal[0]    recordsFiltered = DataCountFilTotal[0]    resp = {"draw": draw, "recordsTotal": recordsTotal, "recordsFiltered": recordsFiltered, "data":data}    return HttpResponse(json.dumps(resp), content_type='application/json')def clusterRecentActivities(limit,where='',user=''):    Perm_Type_Arr = permissions.checkclusterTypePermission('',user)    if len(Perm_Type_Arr):        if len(Perm_Type_Arr) == 1:            Perm_Type_Arr = "(" + str(Perm_Type_Arr[0]) + ")"        else:            Perm_Type_Arr = tuple(Perm_Type_Arr)    else:        dataString = ''        return dataString    if where:        where += ' and cluster.Type in ' + str(Perm_Type_Arr)    else:        where = 'cluster.Type in' + str(Perm_Type_Arr)    sql = 'SELECT log_cluster.ClusterID,cluster.ClusterID,UserName,INET_NTOA(UserIp),ActionType,Details,LogTime, cluster.ClusterName,ClusterLogID FROM log_cluster INNER JOIN cluster ON log_cluster.ClusterID=cluster.ClusterID '+where+' order by ClusterLogID desc limit '+limit+';'    clusterData = db_query(sql)    dataString = '<h2 id="cluster_activities" >Recent Activity in Cluster</h2>'    dataString += '<div class="shadow-in">'    dataString += '<ul class="homeClusterActivity force-overflow">'    if clusterData:        for data in clusterData:            daysAgo =  str((datetime.datetime.today().date() - data[6].date()).days)            if daysAgo == "0":                daysAgo = "<span class='days-ago'>" + str("today") + "</span>"            else:                daysAgo = "<span class='days-ago'>" + str(daysAgo) + "d ago</span>"            if str(data[4]) == str(constant_data.ACTIONTYPE[1]):                sym = "<span class='glyphicon glyphicon-plus' title='added'></span>"                #desc = " is added "+str(daysAgo)                desc = " "+str(daysAgo)            if str(data[4]) == str(constant_data.ACTIONTYPE[2]):               # desc = " is updated "+str(daysAgo)                desc = " "+str(daysAgo)                sym = "<span class='glyphicon glyphicon-edit' title='updated'></span>"            if str(data[4]) == str(constant_data.ACTIONTYPE[3]):                #desc = " is deleted "+str(daysAgo)                desc = " "+str(daysAgo)                sym = "<span class='glyphicon glyphicon-remove' title='deleted'></span>"            clusterName = trimString(str(data[7]), 13)            if str(data[4]) == str(constant_data.ACTIONTYPE[3]):                dataString += "<p> <a style='cursor:not-allowed;text-decoration:none;' title='deleted'>"+str(sym)+" " + str( clusterName) + "</a> " + desc + " </p>"            else:                dataString += "<p><a href='/cluster/" + str(data[0]) + "/?action=view/' title='view Cluster'>" +str(sym)+" " + str(clusterName) + "</a> " + desc + " </p>"        dataString += "</ul>"        dataString += "</div>"    else:        dataString = ''    return dataStringdef signatureRecentActivities(limit,whereCond='',user=''):    where = 'where agerecord.Record_ID_FK = qh_sig_status.SIG_ID_FK  '    if whereCond:        where += 'and'+ str(whereCond)    Perm_Type_Arr = permissions.checkclusterTypePermission('', user)    if len(Perm_Type_Arr) != 0:        if len(Perm_Type_Arr) == 1:            Perm_Type_Arr = "(" + str(Perm_Type_Arr[0]) + ")"        else:            Perm_Type_Arr = tuple(Perm_Type_Arr)    else:        signatureActivites = ''        return signatureActivites    if where:        where += ' and qh_sig_status.SIG_TYPE_FK in ' + str(Perm_Type_Arr)    else:        where = 'qh_sig_status.SIG_TYPE_FK in ' + str(Perm_Type_Arr)    signatureActivites = '<h2 id="signature_activities" >Recent Activities in Signature</h2>'    #sql = 'select agerecord.MalwareIndex,agerecord.AuthorName,agerecord.TimeStamp,agerecord.SigCnt, qh_sig_status.DATE_DELETED,qh_sig_status.MARK_DELETED,agerecord.Record_ID_FK,qh_sig_status.SIG_TYPE_FK,malwarenames.MAL_NAME from agerecord,qh_sig_status,malwarenames '+str(where)+' order by agerecord.Record_ID_FK desc limit '+str(limit)    sql = 'select agerecord.MalwareIndex,agerecord.AuthorName,agerecord.TimeStamp,agerecord.SigCnt, qh_sig_status.DATE_DELETED,qh_sig_status.MARK_DELETED,agerecord.Record_ID_FK,qh_sig_status.SIG_TYPE_FK,malwarenames.MAL_NAME from agerecord join qh_sig_status on agerecord.Record_ID_FK=qh_sig_status.SIG_ID_FK join malwarenames on agerecord.MalwareIndex=malwarenames.MAL_NAME_INDEX '+str(where)+' order by agerecord.Record_ID_FK desc limit '+str(limit)    signatureData = db_query(sql)    signatureActivites += '<div class="shadow-in">'    signatureActivites += '<ul class="homeSignatureActivity force-overflow">'    if signatureData:        for data in signatureData:            if data[5]  == 1: #if deleted                daysAgo = str((datetime.datetime.today().date() - data[4].date()).days)                if daysAgo == "0":                    #desc = " is deleted  <span class='days-ago '>" + str("today") + "</span>"                    deleted = "<span class='glyphicon glyphicon-remove' title='deleted'></span>"                    desc = "  <span class='days-ago '>" + str("today") + "</span>"                else:                    deleted = "<span class='glyphicon glyphicon-remove' title='deleted'></span>"                    #desc = " is deleted <span class='days-ago'>" + str(daysAgo) + "d ago</span>"                    desc = " <span class='days-ago'>" + str(daysAgo) + "d ago</span>"                signatureActivites += "<li><a style='cursor:not-allowed;text-decoration:none;'>"+str(deleted)+" " + str(data[0]) + "("+str(trimString(data[8],18))+")</a>" + desc + "</li>"            else:                daysAgo =  str((datetime.datetime.today().date() - data[2].date()).days)                if daysAgo == "0":                   # desc = " is added/updated <span class='days-ago'>" + str("today") + "</span>"                    update = "<span class='glyphicon glyphicon-edit' title='added/updated'></span> "                    desc = "<span class='days-ago'>" + str("today") + "</span>"                else:                    #desc = " is added/updated <span class='days-ago '>" + str(daysAgo) + "d ago</span>"                    update = "<span class='glyphicon glyphicon-edit' title='added/updated'></span> "                    desc = " <span class='days-ago '>" + str(daysAgo) + "d ago</span>"                signatureActivites += "<li> <a href='/signature/"+str(data[6])+"?action=view' title='View Signature'> "+str(update)+"" + str(data[0]) + "("+str(trimString(data[8],18))+")</a> " + desc + "</li>"        signatureActivites += "</ul></div>"    else:        signatureActivites = ''    return signatureActivitesdef setPostData(request,key=0,value=''):    #if key ==    passdef getConfigValue(type,section,key):    section = section.upper()    key = key.lower()    ConfigFile = settings.TOOL_PATH+"config\\"+constant_data.TypeProperty[type]['configFile']    config = ConfigParser()    config.read(ConfigFile)    print(config)    if section in dict(config.items()):        return config.get(section,key)    print('Error in  getConfigValue ',type,section,key)    return 0def database_connection_check(function):    def _decorator(fun):        def database_view(request, *args, **kwargs):            try:                sql = "SELECT VERSION()"                if db_query(sql,1) is not None:                    return fun(request, *args, **kwargs)                else:                    return HttpResponseRedirect('/error/?type=1')            except Exception as e:                print('Error (database_connection_check) : ',e)        return database_view    if function is None:        return _decorator    else:        return _decorator(function)def getFileSectionDetails(type,sectionName):    ConfigFile = settings.TOOL_PATH+"config\\"+str(constant_data.TypeProperty[type]['configFile'])    config = ConfigParser()    config.read(ConfigFile)    fileTypeArr =  dict(config.items(str(sectionName)))    if sectionName == '':        return 0    return fileTypeArrgen_inx_flag_signatures			=	(1 << 0)gen_inx_flag_scan_rule			=	(1 << 1)gen_inx_flag_scan_rule_susp		=	(1 << 2)gen_inx_flag_sequence			=	(1 << 3)gen_inx_flag_filters			=	(1 << 4)gen_inx_flag_mark_deleted		=	(1 << 5)gen_inx_flag_md5				=	(1 << 6)gen_inx_flag_silent				=	(1 << 7)gen_inx_flag_lab_submission		=	(1 << 8)gen_inx_flag_weak_detection		=	(1 << 9)#pattern wise flagsgen_inx_case_not_compare		=	(1 << 0)gen_inx_wild_char_flag			=	(1 << 1)gen_inx_cleanup_data			=	(1 << 2)gen_inx_weak_sig				=	(1 << 3)gen_inx_token_sig				=	(1 << 4)def is_flag_on(variable, flag):    if (flag == ((variable) & (flag))):        return True    else:        return Falsedef checkFlag(value,flag):    if True == is_flag_on(value, flag):        return 1    else:        return 0def cluster_state_priority(user,perm_arr,useris):    #sql = 'select cluster.State,count(cluster.ClusterId) from cluster where cluster.Status=1 and cluster.`Type` in ' + str(perm_arr) + ' and cluster.' + str(useris) + '="' + str(user) + '" group by cluster.State;'    sql = 'SELECT agerecord.SigState, COUNT(agerecord.Record_ID_FK) FROM agerecord join cluster on agerecord.ClusterId = cluster.ClusterID and cluster.`Status`=1  JOIN qh_sig_status ON agerecord.Record_ID_FK = qh_sig_status.SIG_ID_FK AND qh_sig_status.MARK_DELETED=0 WHERE qh_sig_status.SIG_TYPE_FK IN ' + str(perm_arr) + 'and agerecord.AuthorName ="' + str(user) + '"  GROUP BY agerecord.SigState;'    state_result = db_query(sql)    sql = 'select cluster.Priority,count(cluster.ClusterId) from cluster where cluster.Status=1 and cluster.`Type` in ' + str(perm_arr) + ' and cluster.' + str(useris) + '="' + str(user) + '" group by cluster.Priority;'    priority_result = db_query(sql)    revPriority = dict(zip(constant_data.CLUSTER_PRIORITY.values(), constant_data.CLUSTER_PRIORITY.keys()))    # update priority result    priority_result = dict(priority_result)    priority_dict = {}    for priority in revPriority.keys():        if int(priority) not in priority_result.keys():            priority_dict.update({priority:0})        else:            priority_dict.update({priority:priority_result[int(priority)]})    # update state result    state_result = dict(state_result)    state_dict = {}    for state in constant_data.SIG_STATELIST.keys():        if state  in state_result.keys():            state_dict.update({constant_data.SIG_STATELIST[state]: state_result[state]})        #     #state_dict.update({constant_data.STATELIST[state]: 0})        #        # else:        #     state_dict.update({constant_data.STATELIST[state]:state_result[state]})    if priority_dict:        priority_dict = sorted(priority_dict.items())    if state_dict:        state_dict = sorted(state_dict.items())    return state_dictdef users_with_perm(perm_name):    return User.objects.filter(        Q(user_permissions__codename=perm_name) |        Q(groups__permissions__codename=perm_name)).distinct()def users_with_perms(perm_names):    data= []    for perm_name in perm_names:        data.extend(User.objects.filter(        Q(user_permissions__codename=perm_name) |        Q(groups__permissions__codename=perm_name)).distinct())    return list(set(data))def dataToDict(data):    dataProcessed = {}    for item in data:        dataProcessed.setdefault(item[0], []).append(item[1])    return dataProcessed